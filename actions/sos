#!/usr/bin/python3

import os
import subprocess
import tarfile
import tempfile
import traceback
from contextlib import contextmanager
from datetime import datetime
from charmhelpers.core.hookenv import action_set

log_file = None

@contextmanager
def archive_dir():
    """ Open a context with a new temporary directory. This temporary directory
    is made available to child scripts as the SOS_ARCHIVE_DIR environment var.

    When the context closes, the directory is archived, and the archive
    location is added to Juju action output. """
    global log_file
    with tempfile.TemporaryDirectory() as temp_dir:
        name = "sos-" + datetime.now().strftime("%Y%m%d%H%M%S")
        sos_archive_dir = os.path.join(temp_dir, name)
        os.makedirs(sos_archive_dir)
        os.environ["SOS_ARCHIVE_DIR"] = sos_archive_dir
        with open("%s/sos.log" % sos_archive_dir, "w") as log_file:
            yield
        os.chdir(temp_dir)
        tar_path = "/home/ubuntu/%s.tar.gz" % name
        with tarfile.open(tar_path, "w:gz") as f:
            f.add(name)
        action_set({"output": "SOS archive dumped to " + tar_path})

def log(msg, depth=0):
    """ Log a message that will be included in the SOS archive.

    Must be run inside an archive_dir context. """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    prefix = "%s | %s" % (timestamp, "| " * depth)
    for line in str(msg).splitlines():
        log_file.write(prefix + line.rstrip() + "\n")

def run_script(script):
    """ Run a single script. Must be run inside an archive_dir context. """
    log("Running script: " + script)
    process = subprocess.Popen(
        "sos-scripts/" + script,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    )
    for line in process.stdout:
        log(line.decode("utf-8"), depth=1)
    exit_code = process.wait()
    if exit_code != 0:
        log("ERROR: %s failed with exit code %d" % (script, exit_code))

def run_all_scripts():
    """ Run all scripts. For the sake of robustness, log and ignore any
    exceptions that occur.

    Must be run inside an archive_dir context. """
    scripts = os.listdir("sos-scripts")
    for script in scripts:
        try:
            run_script(script)
        except:
            log(traceback.format_exc())

def add_lib_folder_to_python_path():
    """ Add lib folder to python path.

    Reactive hooks do this. We'll do it as well, so that SOS scripts can import
    the same things that reactive code can. """
    os.environ["PYTHONPATH"] = "lib"

def main():
    """ Open an archive context and run all scripts. """
    add_lib_folder_to_python_path()
    with archive_dir():
        run_all_scripts()

if __name__ == "__main__":
    main()
